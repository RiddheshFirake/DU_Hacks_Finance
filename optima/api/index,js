const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const { createProxyMiddleware } = require('http-proxy-middleware');

// Setup Express
const app = express();

// Middleware
app.use(cors());
app.use(express.json()); // To parse incoming JSON requests

// Connect to MongoDB
mongoose.connect(process.env.MONGODB_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
.then(() => console.log('MongoDB connected'))
.catch(err => console.log('MongoDB connection error:', err));

// =====================
// MODELS
// =====================
const expenseSchema = new mongoose.Schema({
  name: String,
  amount: Number,
  category: String,
  date: { type: Date, default: Date.now },
});
const Expense = mongoose.model('Expense', expenseSchema);

const budgetSchema = new mongoose.Schema({
  name: String,
  amount: Number,
  emoji: String,
});
const Budget = mongoose.model('Budget', budgetSchema);

// =====================
// ROUTES
// =====================

// Create Budget
app.post('/api/budgets', async (req, res) => {
  try {
    const { name, amount, emoji } = req.body;
    const newBudget = new Budget({ name, amount, emoji });
    await newBudget.save();
    res.status(201).json(newBudget);
  } catch (error) {
    res.status(500).json({ message: 'Error creating budget', error });
  }
});

// Fetch Total Budget
app.get('/api/total-budget', async (req, res) => {
  try {
    const totalBudget = await Budget.aggregate([
      { $group: { _id: null, totalAmount: { $sum: "$amount" } } },
    ]);
    res.status(200).json({ totalBudget: totalBudget.length > 0 ? totalBudget[0].totalAmount : 0 });
  } catch (error) {
    res.status(500).json({ message: 'Error calculating total budget', error });
  }
});

// Fetch All Expenses
app.get('/api/expenses', async (req, res) => {
  try {
    const expenses = await Expense.find();
    res.status(200).json(expenses);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching expenses', error });
  }
});

// Add New Expense
app.post('/api/expenses', async (req, res) => {
  try {
    const { name, amount, category } = req.body;
    const newExpense = new Expense({ name, amount, category });
    await newExpense.save();
    res.status(201).json(newExpense);
  } catch (error) {
    res.status(500).json({ message: 'Error adding expense', error });
  }
});

// Update Expense by ID
app.put('/api/expenses/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const { name, amount, category } = req.body;

    const updatedExpense = await Expense.findByIdAndUpdate(
      id,
      { name, amount, category },
      { new: true }
    );

    if (!updatedExpense) {
      return res.status(404).json({ message: 'Expense not found' });
    }

    res.status(200).json(updatedExpense);
  } catch (error) {
    res.status(500).json({ message: 'Error updating expense', error });
  }
});

// Fetch All Budgets
app.get('/api/budgets', async (req, res) => {
  try {
    const budgets = await Budget.find();
    res.status(200).json(budgets);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching budgets', error });
  }
});

// EXPORT the Express App for Vercel Serverless Functions
module.exports = app;
